{"ast":null,"code":"var _jsxFileName = \"/app/multichain-chainflip/frontend/src/contexts/BlockchainContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlockchainContext = /*#__PURE__*/createContext();\nexport const useBlockchain = () => {\n  _s();\n  const context = useContext(BlockchainContext);\n  if (!context) {\n    throw new Error('useBlockchain must be used within a BlockchainProvider');\n  }\n  return context;\n};\n_s(useBlockchain, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const BlockchainProvider = ({\n  children\n}) => {\n  _s2();\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [chainId, setChainId] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [networkStatus, setNetworkStatus] = useState({\n    polygonPos: {\n      connected: false,\n      chainId: 80002\n    },\n    l2Cdk: {\n      connected: false,\n      chainId: 1001\n    }\n  });\n\n  // Check if MetaMask is installed\n  const isMetaMaskInstalled = () => {\n    return typeof window !== 'undefined' && typeof window.ethereum !== 'undefined';\n  };\n\n  // Connect to MetaMask\n  const connectWallet = async () => {\n    if (!isMetaMaskInstalled()) {\n      alert('Please install MetaMask to use this application');\n      return;\n    }\n    try {\n      setIsConnecting(true);\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      if (accounts.length > 0) {\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n        const network = await provider.getNetwork();\n        setAccount(accounts[0]);\n        setProvider(provider);\n        setSigner(signer);\n        setChainId(Number(network.chainId));\n        setIsConnected(true);\n\n        // Check network status\n        await checkNetworkStatus();\n      }\n    } catch (error) {\n      console.error('Failed to connect wallet:', error);\n      alert('Failed to connect wallet. Please try again.');\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // Disconnect wallet\n  const disconnectWallet = () => {\n    setAccount(null);\n    setProvider(null);\n    setSigner(null);\n    setChainId(null);\n    setIsConnected(false);\n  };\n\n  // Switch to Polygon network\n  const switchToPolygon = async () => {\n    if (!isMetaMaskInstalled()) return;\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: '0x13882'\n        }] // Polygon Amoy testnet\n      });\n    } catch (switchError) {\n      // If network doesn't exist, add it\n      if (switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [{\n              chainId: '0x13882',\n              chainName: 'Polygon Amoy Testnet',\n              nativeCurrency: {\n                name: 'MATIC',\n                symbol: 'MATIC',\n                decimals: 18\n              },\n              rpcUrls: ['https://polygon-amoy.drpc.org'],\n              blockExplorerUrls: ['https://amoy.polygonscan.com/']\n            }]\n          });\n        } catch (addError) {\n          console.error('Failed to add Polygon network:', addError);\n        }\n      } else {\n        console.error('Failed to switch to Polygon network:', switchError);\n      }\n    }\n  };\n\n  // Check network connectivity status\n  const checkNetworkStatus = async () => {\n    try {\n      // Check Polygon PoS connectivity\n      const polygonProvider = new ethers.JsonRpcProvider(process.env.REACT_APP_POLYGON_RPC);\n      const polygonNetwork = await polygonProvider.getNetwork();\n\n      // Check L2 CDK connectivity (if configured)\n      let l2Status = {\n        connected: false,\n        chainId: 1001\n      };\n      if (process.env.REACT_APP_L2_CDK_RPC) {\n        try {\n          const l2Provider = new ethers.JsonRpcProvider(process.env.REACT_APP_L2_CDK_RPC);\n          const l2Network = await l2Provider.getNetwork();\n          l2Status = {\n            connected: true,\n            chainId: Number(l2Network.chainId)\n          };\n        } catch (error) {\n          console.warn('L2 CDK network not available:', error);\n        }\n      }\n      setNetworkStatus({\n        polygonPos: {\n          connected: true,\n          chainId: Number(polygonNetwork.chainId)\n        },\n        l2Cdk: l2Status\n      });\n    } catch (error) {\n      console.error('Failed to check network status:', error);\n      setNetworkStatus({\n        polygonPos: {\n          connected: false,\n          chainId: 80002\n        },\n        l2Cdk: {\n          connected: false,\n          chainId: 1001\n        }\n      });\n    }\n  };\n\n  // Listen for account changes\n  useEffect(() => {\n    if (isMetaMaskInstalled()) {\n      const handleAccountsChanged = accounts => {\n        if (accounts.length === 0) {\n          disconnectWallet();\n        } else if (accounts[0] !== account) {\n          setAccount(accounts[0]);\n        }\n      };\n      const handleChainChanged = chainId => {\n        setChainId(parseInt(chainId, 16));\n        window.location.reload(); // Reload to reset state\n      };\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', handleChainChanged);\n\n      // Check if already connected\n      window.ethereum.request({\n        method: 'eth_accounts'\n      }).then(accounts => {\n        if (accounts.length > 0) {\n          connectWallet();\n        }\n      });\n      return () => {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n      };\n    }\n  }, [account]);\n\n  // Check network status periodically\n  useEffect(() => {\n    checkNetworkStatus();\n    const interval = setInterval(checkNetworkStatus, 30000); // Every 30 seconds\n    return () => clearInterval(interval);\n  }, []);\n  const value = {\n    account,\n    provider,\n    signer,\n    chainId,\n    isConnected,\n    isConnecting,\n    networkStatus,\n    connectWallet,\n    disconnectWallet,\n    switchToPolygon,\n    checkNetworkStatus,\n    isMetaMaskInstalled\n  };\n  return /*#__PURE__*/_jsxDEV(BlockchainContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n};\n_s2(BlockchainProvider, \"6FfdCTwg4MpObrkErRogFHsdpNE=\");\n_c = BlockchainProvider;\nvar _c;\n$RefreshReg$(_c, \"BlockchainProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","ethers","jsxDEV","_jsxDEV","BlockchainContext","useBlockchain","_s","context","Error","BlockchainProvider","children","_s2","account","setAccount","provider","setProvider","signer","setSigner","chainId","setChainId","isConnected","setIsConnected","isConnecting","setIsConnecting","networkStatus","setNetworkStatus","polygonPos","connected","l2Cdk","isMetaMaskInstalled","window","ethereum","connectWallet","alert","accounts","request","method","length","BrowserProvider","getSigner","network","getNetwork","Number","checkNetworkStatus","error","console","disconnectWallet","switchToPolygon","params","switchError","code","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","addError","polygonProvider","JsonRpcProvider","process","env","REACT_APP_POLYGON_RPC","polygonNetwork","l2Status","REACT_APP_L2_CDK_RPC","l2Provider","l2Network","warn","handleAccountsChanged","handleChainChanged","parseInt","location","reload","on","then","removeListener","interval","setInterval","clearInterval","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/app/multichain-chainflip/frontend/src/contexts/BlockchainContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\n\nconst BlockchainContext = createContext();\n\nexport const useBlockchain = () => {\n  const context = useContext(BlockchainContext);\n  if (!context) {\n    throw new Error('useBlockchain must be used within a BlockchainProvider');\n  }\n  return context;\n};\n\nexport const BlockchainProvider = ({ children }) => {\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [chainId, setChainId] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [networkStatus, setNetworkStatus] = useState({\n    polygonPos: { connected: false, chainId: 80002 },\n    l2Cdk: { connected: false, chainId: 1001 }\n  });\n\n  // Check if MetaMask is installed\n  const isMetaMaskInstalled = () => {\n    return typeof window !== 'undefined' && typeof window.ethereum !== 'undefined';\n  };\n\n  // Connect to MetaMask\n  const connectWallet = async () => {\n    if (!isMetaMaskInstalled()) {\n      alert('Please install MetaMask to use this application');\n      return;\n    }\n\n    try {\n      setIsConnecting(true);\n      \n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      if (accounts.length > 0) {\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n        const network = await provider.getNetwork();\n\n        setAccount(accounts[0]);\n        setProvider(provider);\n        setSigner(signer);\n        setChainId(Number(network.chainId));\n        setIsConnected(true);\n        \n        // Check network status\n        await checkNetworkStatus();\n      }\n    } catch (error) {\n      console.error('Failed to connect wallet:', error);\n      alert('Failed to connect wallet. Please try again.');\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // Disconnect wallet\n  const disconnectWallet = () => {\n    setAccount(null);\n    setProvider(null);\n    setSigner(null);\n    setChainId(null);\n    setIsConnected(false);\n  };\n\n  // Switch to Polygon network\n  const switchToPolygon = async () => {\n    if (!isMetaMaskInstalled()) return;\n\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: '0x13882' }], // Polygon Amoy testnet\n      });\n    } catch (switchError) {\n      // If network doesn't exist, add it\n      if (switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [\n              {\n                chainId: '0x13882',\n                chainName: 'Polygon Amoy Testnet',\n                nativeCurrency: {\n                  name: 'MATIC',\n                  symbol: 'MATIC',\n                  decimals: 18,\n                },\n                rpcUrls: ['https://polygon-amoy.drpc.org'],\n                blockExplorerUrls: ['https://amoy.polygonscan.com/'],\n              },\n            ],\n          });\n        } catch (addError) {\n          console.error('Failed to add Polygon network:', addError);\n        }\n      } else {\n        console.error('Failed to switch to Polygon network:', switchError);\n      }\n    }\n  };\n\n  // Check network connectivity status\n  const checkNetworkStatus = async () => {\n    try {\n      // Check Polygon PoS connectivity\n      const polygonProvider = new ethers.JsonRpcProvider(process.env.REACT_APP_POLYGON_RPC);\n      const polygonNetwork = await polygonProvider.getNetwork();\n      \n      // Check L2 CDK connectivity (if configured)\n      let l2Status = { connected: false, chainId: 1001 };\n      if (process.env.REACT_APP_L2_CDK_RPC) {\n        try {\n          const l2Provider = new ethers.JsonRpcProvider(process.env.REACT_APP_L2_CDK_RPC);\n          const l2Network = await l2Provider.getNetwork();\n          l2Status = { connected: true, chainId: Number(l2Network.chainId) };\n        } catch (error) {\n          console.warn('L2 CDK network not available:', error);\n        }\n      }\n\n      setNetworkStatus({\n        polygonPos: { \n          connected: true, \n          chainId: Number(polygonNetwork.chainId) \n        },\n        l2Cdk: l2Status\n      });\n    } catch (error) {\n      console.error('Failed to check network status:', error);\n      setNetworkStatus({\n        polygonPos: { connected: false, chainId: 80002 },\n        l2Cdk: { connected: false, chainId: 1001 }\n      });\n    }\n  };\n\n  // Listen for account changes\n  useEffect(() => {\n    if (isMetaMaskInstalled()) {\n      const handleAccountsChanged = (accounts) => {\n        if (accounts.length === 0) {\n          disconnectWallet();\n        } else if (accounts[0] !== account) {\n          setAccount(accounts[0]);\n        }\n      };\n\n      const handleChainChanged = (chainId) => {\n        setChainId(parseInt(chainId, 16));\n        window.location.reload(); // Reload to reset state\n      };\n\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', handleChainChanged);\n\n      // Check if already connected\n      window.ethereum.request({ method: 'eth_accounts' })\n        .then(accounts => {\n          if (accounts.length > 0) {\n            connectWallet();\n          }\n        });\n\n      return () => {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n      };\n    }\n  }, [account]);\n\n  // Check network status periodically\n  useEffect(() => {\n    checkNetworkStatus();\n    const interval = setInterval(checkNetworkStatus, 30000); // Every 30 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  const value = {\n    account,\n    provider,\n    signer,\n    chainId,\n    isConnected,\n    isConnecting,\n    networkStatus,\n    connectWallet,\n    disconnectWallet,\n    switchToPolygon,\n    checkNetworkStatus,\n    isMetaMaskInstalled,\n  };\n\n  return (\n    <BlockchainContext.Provider value={value}>\n      {children}\n    </BlockchainContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}